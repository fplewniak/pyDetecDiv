"""
GUI for an example plugin showing how to create, populate and query a database table to store results generated by a
plugin
"""
from PySide6.QtCore import QStringListModel, Qt
from PySide6.QtSql import QSqlQueryModel, QSqlQuery, QSqlDatabase
from PySide6.QtWidgets import QFrame, QFormLayout, QLabel, QComboBox, QListView, QDialogButtonBox, QDockWidget, \
    QTableView, QHeaderView, QAbstractItemView

from pydetecdiv.utils import singleton


@singleton
class ROIselector(QDockWidget):
    """
    A DockWidget to host the GUI for Example plugin's
    This is a singleton to avoid creating more than one window, but this is not compulsory and there may be several
    instance of such a window for a single plugin if needed.
    """

    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle('ROI classification (Deep Learning)')
        self.setObjectName('ROIclassification')

        self.form = QFrame()
        self.form.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)
        self.formLayout = QFormLayout(self.form)

        self.table = QTableView(self.form)

        self.model = QSqlQueryModel()
        self.table.setModel(self.model)

        self.table.setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)
        self.table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.selection_model = self.table.selectionModel()

        self.formLayout.addRow(self.table)

        self.button_box = QDialogButtonBox(QDialogButtonBox.Close | QDialogButtonBox.Ok, self)
        self.button_box.setCenterButtons(True)

        self.formLayout.addRow(self.button_box)

        self.button_box.rejected.connect(self.close)

        self.setWidget(self.form)

        parent.addDockWidget(Qt.LeftDockWidgetArea, self, Qt.Vertical)

    def update_list(self, dbname):
        db = QSqlDatabase("QSQLITE")
        db.setDatabaseName(dbname)
        db.open()
        query = QSqlQuery(
            "SELECT FOV.name as 'FOV name', count(ROI.id_) as 'ROIs', ImageResource.tdim as 'frames',"
            "ImageResource.zdim as 'layers', ImageResource.cdim as 'channels'"
            " FROM FOV, ImageResource "
            "JOIN ROI ON ROI.fov == FOV.id_ "
            "WHERE FOV.id_ == ImageResource.fov "
            "GROUP BY FOV.id_",
            db=db)
        self.model.setQuery(query)
        self.table.resizeColumnsToContents()


@singleton
class ModelSelector(QDockWidget):
    """
    A DockWidget to host the GUI for Example plugin's
    This is a singleton to avoid creating more than one window, but this is not compulsory and there may be several
    instance of such a window for a single plugin if needed.
    """

    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle('Select ROI classification model')
        self.setObjectName('ModelSelector')

        self.form = QFrame()
        self.form.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)
        self.formLayout = QFormLayout(self.form)

        self.button_box = QDialogButtonBox(QDialogButtonBox.Close | QDialogButtonBox.Ok, self)
        self.button_box.setCenterButtons(True)

        self.formLayout.addRow(self.button_box)

        self.button_box.rejected.connect(self.close)

        self.setWidget(self.form)

        parent.addDockWidget(Qt.LeftDockWidgetArea, self, Qt.Vertical)
