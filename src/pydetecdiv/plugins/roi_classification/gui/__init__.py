"""
GUI for an example plugin showing how to create, populate and query a database table to store results generated by a
plugin
"""
import importlib
import os
import pkgutil

from PySide6.QtCore import QStringListModel, Qt
from PySide6.QtSql import QSqlQueryModel, QSqlQuery, QSqlDatabase
from PySide6.QtWidgets import QFrame, QFormLayout, QLabel, QComboBox, QListView, QDialogButtonBox, QDockWidget, \
    QTableView, QHeaderView, QAbstractItemView, QVBoxLayout, QGroupBox

from pydetecdiv.utils import singleton
from pydetecdiv.plugins.roi_classification import models

@singleton
class ROIclassification(QDockWidget):
    """
    A DockWidget to host the GUI for ROI classification plugin
    This is a singleton to avoid creating more than one window, but this is not compulsory and there may be several
    instance of such a window for a single plugin if needed.
    """
    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle('ROI classification (Deep Learning)')
        self.setObjectName('ROIclassification')

        self.form = QFrame()
        self.form.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)
        self.vert_layout = QVBoxLayout(self.form)

        self.classifier_selection = QGroupBox(self.form)
        self.classifier_selection.setTitle('Select classifier')
        self.classifier_selectionLayout = QFormLayout(self.classifier_selection)

        self.network = QComboBox(self.classifier_selection)
        self.classifier_selectionLayout.addRow(QLabel('Network:'), self.network)
        self.weights = QComboBox(self.classifier_selection)
        self.network.currentIndexChanged.connect(self.update_model_weights)
        self.classifier_selectionLayout.addRow(QLabel('Weights:'), self.weights)

        self.roi_selection = QGroupBox(self.form)
        self.roi_selection.setTitle('Select ROIs')
        self.roi_selectionLayout = QFormLayout(self.roi_selection)

        self.table = QTableView(self.roi_selection)
        self.model = QSqlQueryModel()
        self.table.setModel(self.model)

        self.table.setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)
        self.table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.selection_model = self.table.selectionModel()
        self.roi_selectionLayout.addRow(self.table)

        self.channels = QFrame(self.roi_selection)
        self.channels.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)
        self.channelsLayout = QFormLayout(self.channels)
        self.red_channel = QComboBox(self.channels)
        self.green_channel = QComboBox(self.channels)
        self.blue_channel = QComboBox(self.channels)
        self.channelsLayout.addRow(QLabel('Red'), self.red_channel)
        self.channelsLayout.addRow(QLabel('Green'), self.green_channel)
        self.channelsLayout.addRow(QLabel('Blue'), self.blue_channel)
        self.roi_selectionLayout.addRow(self.channels)

        self.button_box = QDialogButtonBox(QDialogButtonBox.Close | QDialogButtonBox.Ok, self)
        self.button_box.setCenterButtons(True)

        self.vert_layout.addWidget(self.classifier_selection)
        self.vert_layout.addWidget(self.roi_selection)
        self.vert_layout.addWidget(self.button_box)

        self.button_box.rejected.connect(self.close)
        self.setWidget(self.form)
        parent.addDockWidget(Qt.LeftDockWidgetArea, self, Qt.Vertical)

    def update_list(self, project):
        db = QSqlDatabase("QSQLITE")
        db.setDatabaseName(project.repository.name)
        db.open()
        query = QSqlQuery(
            "SELECT FOV.name as 'FOV name', count(ROI.id_) as 'ROIs', ImageResource.tdim as 'frames',"
            "ImageResource.zdim as 'layers', ImageResource.cdim as 'channels'"
            " FROM FOV, ImageResource "
            "JOIN ROI ON ROI.fov == FOV.id_ "
            "WHERE FOV.id_ == ImageResource.fov "
            "GROUP BY FOV.id_",
            db=db)
        self.model.setQuery(query)
        self.table.resizeColumnsToContents()
        n_layers = project.get_object('ImageResource', 1).zdim
        self.red_channel.clear()
        self.green_channel.clear()
        self.blue_channel.clear()
        self.red_channel.addItems([str(i) for i in range(n_layers)])
        self.green_channel.addItems([str(i) for i in range(n_layers)])
        self.blue_channel.addItems([str(i) for i in range(n_layers)])
        self.green_channel.setCurrentIndex(1)
        self.blue_channel.setCurrentIndex(2)

    # def get_networks(self):
    #     """
    #     Discover available network modules and load them
    #     """
    #     networks_dir = pydetecdiv.plugins.__path__ + [pydetecdiv.app.get_plugins_dir()]
    #     for finder, name, _ in pkgutil.iter_modules(plugins_dir):
    #         loader = finder.find_module(name)
    #         spec = importlib.util.spec_from_file_location(name, loader.path)
    #         module = importlib.util.module_from_spec(spec)
    #         sys.modules[name] = module
    #         spec.loader.exec_module(module)
    #         if module.Plugin.category not in self.categories:
    #             self.categories.append(module.Plugin.category)
    #         self.plugins.append(module.Plugin())

    def update_model_weights(self):
        model_path = self.network.currentData().__path__[0]
        w_files = [f for f in os.listdir(model_path) if os.path.isfile(os.path.join(model_path, f))]
        self.weights.clear()
        for f in w_files:
            if f.endswith('.h5'):
                self.weights.addItem(f, userData=os.path.join(model_path, f))
        self.weights.addItem('None', userData=None)

@singleton
class ROIselector(QDockWidget):
    """
    A DockWidget to host the GUI for Example plugin's
    This is a singleton to avoid creating more than one window, but this is not compulsory and there may be several
    instance of such a window for a single plugin if needed.
    """

    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle('ROI classification (Deep Learning)')
        self.setObjectName('ROIclassification')

        self.form = QFrame()
        self.form.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)
        self.formLayout = QFormLayout(self.form)

        self.table = QTableView(self.form)

        self.model = QSqlQueryModel()
        self.table.setModel(self.model)

        self.table.setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)
        self.table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.selection_model = self.table.selectionModel()

        self.formLayout.addRow(self.table)

        self.button_box = QDialogButtonBox(QDialogButtonBox.Close | QDialogButtonBox.Ok, self)
        self.button_box.setCenterButtons(True)

        self.formLayout.addRow(self.button_box)

        self.button_box.rejected.connect(self.close)

        self.setWidget(self.form)

        parent.addDockWidget(Qt.LeftDockWidgetArea, self, Qt.Vertical)

    def update_list(self, dbname):
        db = QSqlDatabase("QSQLITE")
        db.setDatabaseName(dbname)
        db.open()
        query = QSqlQuery(
            "SELECT FOV.name as 'FOV name', count(ROI.id_) as 'ROIs', ImageResource.tdim as 'frames',"
            "ImageResource.zdim as 'layers', ImageResource.cdim as 'channels'"
            " FROM FOV, ImageResource "
            "JOIN ROI ON ROI.fov == FOV.id_ "
            "WHERE FOV.id_ == ImageResource.fov "
            "GROUP BY FOV.id_",
            db=db)
        self.model.setQuery(query)
        self.table.resizeColumnsToContents()


@singleton
class ModelSelector(QDockWidget):
    """
    A DockWidget to host the GUI for Example plugin's
    This is a singleton to avoid creating more than one window, but this is not compulsory and there may be several
    instance of such a window for a single plugin if needed.
    """

    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle('Select ROI classification model')
        self.setObjectName('ModelSelector')

        self.form = QFrame()
        self.form.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)
        self.formLayout = QFormLayout(self.form)

        self.button_box = QDialogButtonBox(QDialogButtonBox.Close | QDialogButtonBox.Ok, self)
        self.button_box.setCenterButtons(True)

        self.formLayout.addRow(self.button_box)

        self.button_box.rejected.connect(self.close)

        self.setWidget(self.form)

        parent.addDockWidget(Qt.LeftDockWidgetArea, self, Qt.Vertical)
