"""
GUI for an example plugin showing how to create, populate and query a database table to store results generated by a
plugin
"""
import json
import os

from PySide6.QtSql import QSqlQuery, QSqlDatabase
from PySide6.QtWidgets import QFileDialog

from pydetecdiv.utils import singleton
from pydetecdiv.app import PyDetecDiv, pydetecdiv_project, get_plugins_dir

from pydetecdiv.plugins.gui import *
from pydetecdiv.plugins.roi_classification.gui.ImportAnnotatedROIs import FOV2ROIlinks


@singleton
class ROIclassificationDialog(Dialog):
    def __init__(self, plugin, title=None):
        super().__init__(plugin, title=title)

        self.classifier_selection = self.addGroupBox('Select classifier')
        self.network = self.classifier_selection.addOption('Network:', ComboBox)
        self.weights = self.classifier_selection.addOption('Weights:', ComboBox)
        self.classes = self.classifier_selection.addOption('Classes:', LineEdit)

        self.controller = self.addGroupBox('Choose action')
        self.action_menu = self.controller.addOption('Action:', ComboBox)
        self.action_menu.addItemDict({
            'Create new model': self.plugin.create_model,
            'Annotate ROIs': self.plugin.annotate_rois,
            'Train model': self.plugin.train_model,
            'Classify ROIs': self.plugin.predict
        })
        self.action_menu.setCurrentIndex(3)

        self.roi_selection = self.addGroupBox('Select ROIs')
        self.table = self.roi_selection.addOption(None, TableView, multiselection=True, behavior='rows')
        self.selection_model = self.table.selectionModel()

        self.roi_sample = self.addGroupBox('Sample ROIs')
        self.roi_number = self.roi_sample.addOption('ROI sample size:', SpinBox, adaptive=True)

        self.roi_import = self.addGroupBox('Import annotated ROIs')
        self.roi_import_box = self.roi_import.addOption('Select annotation file:', DialogButtonBox,
                                                        buttons=QDialogButtonBox.Open)
        # self.roi_import_box.addButton(QDialogButtonBox.Open)

        self.datasets = self.addGroupBox('ROI dataset sizes')
        self.training_data = self.datasets.addOption('Training dataset:', DoubleSpinBox, value=0.6)
        self.validation_data = self.datasets.addOption('Validation dataset:', DoubleSpinBox, value=0.2)
        self.test_data = self.datasets.addOption('Test dataset:', DoubleSpinBox, value=0.2, enabled=False)

        self.preprocessing = self.addGroupBox('Preprocessing')
        self.channels = self.preprocessing.addOption(None, GroupBox)
        # self.channels.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)

        self.red_channel = self.channels.addOption('Red', ComboBox)
        self.green_channel = self.channels.addOption('Green', ComboBox)
        self.blue_channel = self.channels.addOption('Blue', ComboBox)

        self.misc_box = self.addGroupBox('Miscellaneous')

        self.epochs = self.misc_box.addOption('Epochs:', SpinBox, value=16, adaptive=True)

        self.batch_size = self.misc_box.addOption('Batch size:', SpinBox, range=(2, 4096), value=128, adaptive=True)

        self.seq_length = self.misc_box.addOption('Sequence length:', SpinBox, value=50, adaptive=True)

        self.button_box = self.addButtonBox()

        self.arrangeWidgets([
            self.controller,
            self.classifier_selection,
            self.preprocessing,
            self.roi_selection,
            self.roi_sample,
            self.roi_import,
            self.datasets,
            self.misc_box,
            self.button_box
        ])

        PyDetecDiv().project_selected.connect(self.update_all)
        PyDetecDiv().saved_rois.connect(self.set_table_view)

        self.button_box.rejected.connect(self.close)
        self.roi_import_box.accepted.connect(self.import_annotated_rois)
        self.button_box.accepted.connect(self.plugin.run)
        self.network.currentIndexChanged.connect(self.update_classes)
        self.classes.textChanged.connect(self.plugin.update_class_names)
        self.network.currentIndexChanged.connect(self.update_model_weights)
        self.action_menu.currentIndexChanged.connect(self.adapt)
        self.training_data.valueChanged.connect(lambda _: self.update_datasets(self.training_data))
        self.validation_data.valueChanged.connect(lambda _: self.update_datasets(self.validation_data))

        self.plugin.load_models(self)
        self.update_all()
        self.adapt()

    def update_all(self):
        self.update_datasets()
        self.set_table_view(PyDetecDiv().project_name)
        with pydetecdiv_project(PyDetecDiv().project_name) as project:
            self.update_list(project)
            self.update_sequence_length(project)
            self.update_num_rois(project)

    def adapt(self):
        """
        Modify the appearance of the GUI according to the selected action
        """
        match (self.action_menu.currentIndex()):
            case 0:
                # Create new model
                self.roi_selection.hide()
                self.roi_sample.hide()
                self.roi_import.hide()
                self.classifier_selection.setRowVisible(1, False)
                self.preprocessing.show()
                self.misc_box.hide()
                self.network.setEditable(True)
                self.classes.setReadOnly(False)
                self.datasets.hide()
            case 1:
                # Annotate ROIs
                self.roi_selection.hide()
                self.roi_sample.show()
                self.roi_import.show()
                self.classifier_selection.setRowVisible(1, False)
                self.preprocessing.hide()
                self.misc_box.hide()
                self.network.setEditable(False)
                self.classes.setReadOnly(True)
                self.datasets.hide()
            case 2:
                # Train model
                self.roi_selection.hide()
                self.roi_sample.hide()
                self.roi_import.hide()
                self.classifier_selection.setRowVisible(1, True)
                self.preprocessing.show()
                self.misc_box.show()
                self.misc_box.setRowVisible(self.epochs, True)
                self.network.setEditable(False)
                self.classes.setReadOnly(True)
                self.datasets.show()
            case 3:
                # Classify ROIs
                self.roi_selection.show()
                self.roi_sample.hide()
                self.roi_import.hide()
                self.classifier_selection.setRowVisible(1, True)
                self.preprocessing.show()
                self.misc_box.show()
                self.misc_box.setRowVisible(self.epochs, False)
                self.network.setEditable(False)
                self.classes.setReadOnly(True)
                self.datasets.hide()
            case _:
                pass
        self.adjustSize()

    def set_table_view(self, project_name):
        """
        Set the content of the Table view to display the available ROIs to classify
        :param project_name: the name of the project
        """
        if project_name:
            with pydetecdiv_project(project_name) as project:
                self.update_list(project)

    def update_list(self, project):
        """
        Update the list of FOVs and the number of corresponding ROIs
        :param project: the current project
        """
        db = QSqlDatabase("QSQLITE")
        db.setDatabaseName(project.repository.name)
        db.open()
        query = QSqlQuery(
            "SELECT FOV.name as 'FOV name', count(ROI.id_) as 'ROIs', ImageResource.tdim as 'frames',"
            "ImageResource.zdim as 'layers', ImageResource.cdim as 'channels'"
            " FROM FOV, ImageResource "
            "JOIN ROI ON ROI.fov == FOV.id_ "
            "WHERE FOV.id_ == ImageResource.fov "
            "GROUP BY FOV.id_",
            db=db)
        self.table.setQuery(query)
        self.table.resizeColumnsToContents()
        n_layers = project.get_object('ImageResource', 1).zdim if project.get_object('ImageResource', 1) else 0
        self.red_channel.clear()
        self.green_channel.clear()
        self.blue_channel.clear()
        self.red_channel.addItems([str(i) for i in range(n_layers)])
        self.green_channel.addItems([str(i) for i in range(n_layers)])
        self.blue_channel.addItems([str(i) for i in range(n_layers)])
        self.green_channel.setCurrentIndex(1)
        self.blue_channel.setCurrentIndex(2)

    def update_num_rois(self, project):
        num_rois = project.count_objects('ROI')
        self.roi_number.setRange(1, num_rois)
        self.roi_number.setValue(int(num_rois / 10))

    def update_sequence_length(self, project):
        """
        Update the maximum value for image sequence according to the umber of frames in the dataset
        :param project: the current project
        """
        db = QSqlDatabase("QSQLITE")
        db.setDatabaseName(project.repository.name)
        db.open()
        query = QSqlQuery(
            "SELECT min(tdim) from ImageResource",
            db=db)
        if query.first() and query.record().value('min(tdim)'):
            self.seq_length.setRange(1, query.record().value('min(tdim)'))

    def update_model_weights(self):
        """
        Update the list of model weights associated with the currently selected network
        """
        model_path = self.network.currentData().__path__[0]
        w_files = [os.path.join(model_path, f) for f in os.listdir(model_path)
                   if os.path.isfile(os.path.join(model_path, f)) and f.endswith('.h5')]

        try:
            user_path = os.path.join(get_plugins_dir(), 'roi_classification', 'models', self.network.currentText())
            w_files.extend([os.path.join(user_path, f) for f in os.listdir(user_path)
                            if os.path.isfile(os.path.join(user_path, f)) and f.endswith('.h5')])
        except FileNotFoundError:
            pass

        self.weights.clear()
        _ = [self.weights.addItem(os.path.basename(f), userData=f) for f in w_files]
        self.weights.addItem('None', userData=None)

    def update_classes(self):
        """
        Update the classes associated with the currently selected model
        """
        self.classes.setText(json.dumps(self.network.currentData().class_names))
        self.plugin.update_class_names()

    def update_datasets(self, changed_dataset=None):
        if changed_dataset:
            self.test_data.setValue(1.0 - (self.training_data.value() + self.validation_data.value()))
            total = self.training_data.value() + self.validation_data.value() + self.test_data.value()
            if total > 1.0:
                changed_dataset.setValue(changed_dataset.value() - total + 1.0)
        else:
            self.test_data.setValue(1 - self.training_data.value() - self.validation_data.value())

    def set_sequence_length(self, project_name):
        """
        Set the maximum value for sequence length
        :param project_name: the name of the project
        """
        if project_name:
            with pydetecdiv_project(project_name) as project:
                self.update_sequence_length(project)

    def import_annotated_rois(self):
        filters = ["csv (*.csv)", ]
        annotation_file, _ = QFileDialog.getOpenFileName(self, caption='Choose file with annotated ROIs',
                                                         dir='.',
                                                         filter=";;".join(filters),
                                                         selectedFilter=filters[0])
        FOV2ROIlinks(annotation_file, self.plugin)
